1
00:00:00,000 --> 00:00:04,000
[字幕生成：BLACK 字幕校对：志宇]

2
00:00:07,000 --> 00:00:10,700
今天来分享一下LLVM的架构和原理

3
00:00:10,700 --> 00:00:15,100
那LLVM里面最重要是架构设计非常独特

4
00:00:15,100 --> 00:00:18,400
在前两天有很多朋友去问我

5
00:00:18,400 --> 00:00:23,000
你讲这个传统编译器跟AI编译器有什么关系?

6
00:00:23,000 --> 00:00:26,300
你到底还要不要讲AI编译器?

7
00:00:27,000 --> 00:00:28,200
ZOMI是这么看的

8
00:00:28,200 --> 00:00:30,700
首先需要去了解传统编译器

9
00:00:30,700 --> 00:00:34,500
因为AI编译器它是基于传统编译器之上去构建的

10
00:00:34,500 --> 00:00:39,600
或者部分参考借鉴了非常多传统编译器的概念

11
00:00:39,600 --> 00:00:43,600
在这里面不期望通过10分钟能把所有东西都介绍完毕

12
00:00:43,600 --> 00:00:48,500
而是通过一个系列慢慢的去给大家去普及各种各样的概念

13
00:00:48,500 --> 00:00:54,100
也给大家汇报一下AI系统、AI编译器最新进展和发展动态

14
00:00:54,100 --> 00:00:55,500
在最开始的时候

15
00:00:55,500 --> 00:00:59,000
苹果基于开源软件GCC开了一个分支

16
00:00:59,000 --> 00:01:01,000
叫做Apple GCC Bench

17
00:01:01,000 --> 00:01:04,000
Apple GCC Bench由苹果去维护

18
00:01:04,000 --> 00:01:07,800
而GCC这个Master由开源组织去维护

19
00:01:07,800 --> 00:01:13,800
一个商业线一个开源线就会引起非常大的冲突和矛盾

20
00:01:13,800 --> 00:01:16,800
苹果的商业Bench有时候会开发一些新的特性

21
00:01:16,800 --> 00:01:18,800
这些新的特性等稳定之后

22
00:01:18,800 --> 00:01:21,600
它希望合回去开源Bench里面

23
00:01:21,600 --> 00:01:23,800
但是开源Bench里面有一些新特性

24
00:01:23,800 --> 00:01:27,800
有时候苹果这个商业分支想把这些新的特性引进来

25
00:01:27,800 --> 00:01:30,800
而两个分支之间不是完全对等的

26
00:01:30,800 --> 00:01:34,300
所以越到后面版本管理就越来越乱

27
00:01:34,300 --> 00:01:36,500
这时候成本就上去了

28
00:01:36,500 --> 00:01:39,800
第二个缺点就是用户用起来就会觉得很别扭

29
00:01:39,800 --> 00:01:42,800
为什么有些特性我在GCC上面是有的

30
00:01:42,800 --> 00:01:47,000
有些特性我在苹果的Apple Bench里面没有呢

31
00:01:47,000 --> 00:01:49,000
你给翻译翻译

32
00:01:49,000 --> 00:01:51,000
什么叫惊喜

33
00:01:51,000 --> 00:01:53,500
翻译翻译什么叫惊喜

34
00:01:53,500 --> 00:01:55,000
为了解决这个问题

35
00:01:55,000 --> 00:01:57,000
苹果就引入了一个大牛

36
00:01:57,000 --> 00:01:58,000
Chris Nutton

37
00:01:58,000 --> 00:02:02,000
可以看到蓝颜不管是18岁还是48岁的时候

38
00:02:02,000 --> 00:02:03,500
样子都是没怎么变的

39
00:02:03,500 --> 00:02:05,000
还是有那么几条皱纹

40
00:02:05,000 --> 00:02:07,000
这边还是那么几条皱纹

41
00:02:07,000 --> 00:02:10,000
区别就在于他的头发更黄了

42
00:02:10,000 --> 00:02:12,000
额头更加蹭亮了

43
00:02:12,000 --> 00:02:14,000
苹果现在大部分的软硬件体系

44
00:02:14,000 --> 00:02:19,000
都是基于LLVM这个编译套装来去开发的

45
00:02:19,000 --> 00:02:21,000
刚才所给大家汇报的内容

46
00:02:21,000 --> 00:02:24,500
都是苹果基于商业线索考虑所布局的一些内容

47
00:02:24,500 --> 00:02:28,500
但是在技术上需要考虑哪些东西呢

48
00:02:28,500 --> 00:02:30,000
高瞻远瞩一下

49
00:02:30,000 --> 00:02:31,000
作为一个技术人

50
00:02:31,000 --> 00:02:33,500
肯定要了解技术相关的东西

51
00:02:33,500 --> 00:02:37,500
为什么LLVM能够逐步的代替掉GCC

52
00:02:37,500 --> 00:02:40,000
LLVM又有哪些好处呢

53
00:02:40,000 --> 00:02:42,000
在一个古老的传说里面

54
00:02:42,000 --> 00:02:44,500
有一个对编译器的定义

55
00:02:44,500 --> 00:02:47,000
人们常说编译器分为三段

56
00:02:47,000 --> 00:02:48,000
第一段是前端

57
00:02:48,000 --> 00:02:49,500
第二段是中间优化

58
00:02:49,500 --> 00:02:51,500
第三段是后端

59
00:02:51,500 --> 00:02:54,500
通常来说这三段的边界是非常分明的

60
00:02:54,500 --> 00:02:57,000
但是在实际的实现过程当中

61
00:02:57,000 --> 00:03:00,000
这三段的分界并没有这么明显

62
00:03:00,000 --> 00:03:01,500
例如GCC

63
00:03:01,500 --> 00:03:04,500
可以看到GCC里面的一个C的前端

64
00:03:04,500 --> 00:03:07,500
是直接对应到多个后端

65
00:03:07,500 --> 00:03:11,000
中间是没有通过所谓的IR去提取的

66
00:03:11,000 --> 00:03:13,000
前端直接跟后端怼到一起

67
00:03:13,000 --> 00:03:17,000
前端跟后端没有做好一个非常明确的分界

68
00:03:17,000 --> 00:03:19,000
没有做好一个非常明确的分界

69
00:03:19,000 --> 00:03:20,500
这就会引起一个什么问题呢

70
00:03:20,500 --> 00:03:22,000
在这里面看一下

71
00:03:22,000 --> 00:03:25,500
这个是Computer Language的一个技术栈

72
00:03:25,500 --> 00:03:27,500
计算机语言又分为很多种

73
00:03:27,500 --> 00:03:29,500
有种叫做High Level的Language

74
00:03:29,500 --> 00:03:31,000
就是高级语言了

75
00:03:31,000 --> 00:03:33,000
像Python、Javascript、VB

76
00:03:33,000 --> 00:03:34,500
这些是高级语言

77
00:03:34,500 --> 00:03:37,000
这些大部分都是在前端的工程师

78
00:03:37,000 --> 00:03:39,500
AI的工程师里面去用的

79
00:03:39,500 --> 00:03:41,500
另外还有一些Middle Level的Language

80
00:03:41,500 --> 00:03:45,500
就是C++、C、Object C、Swift这些

81
00:03:45,500 --> 00:03:48,000
在低级一点还可以有机器码

82
00:03:48,000 --> 00:03:50,000
然后再往下硬件指令

83
00:03:50,000 --> 00:03:53,500
还有System C、HDL等不同的硬件

84
00:03:53,500 --> 00:03:57,500
不同的硬件要对应不同的工程师去做的

85
00:03:57,500 --> 00:04:00,500
假设按照GCC这个套路

86
00:04:00,500 --> 00:04:02,500
每一个前端都对应到后端

87
00:04:02,500 --> 00:04:07,000
这意味着对工程师的要求就是非常的严格

88
00:04:07,000 --> 00:04:08,500
首先我作为一个工程师

89
00:04:08,500 --> 00:04:10,500
我需要去懂前端的语言

90
00:04:10,500 --> 00:04:12,000
我还要懂中间的优化

91
00:04:12,000 --> 00:04:14,500
接着我还要懂硬件的指令

92
00:04:14,500 --> 00:04:15,500
如果我都做到了

93
00:04:15,500 --> 00:04:17,000
我还坐在这里给你们分享

94
00:04:17,000 --> 00:04:18,000
给你们汇报

95
00:04:18,000 --> 00:04:19,000
给你们讲

96
00:04:19,000 --> 00:04:20,000
内容干嘛了

97
00:04:20,000 --> 00:04:21,000
我已经躺赢了

98
00:04:21,000 --> 00:04:23,000
我早就已经年薪百万了

99
00:04:23,000 --> 00:04:24,000
然并卵

100
00:04:24,000 --> 00:04:26,000
我现在还是很苦逼的

101
00:04:26,000 --> 00:04:27,000
没什么关注

102
00:04:27,000 --> 00:04:29,000
然后才给你们做一些简单的分享

103
00:04:29,000 --> 00:04:31,000
就是希望能够有一天

104
00:04:31,000 --> 00:04:32,000
看到我的光明

105
00:04:32,000 --> 00:04:33,000
看到我的领导

106
00:04:33,000 --> 00:04:35,000
能看到我的视频

107
00:04:35,000 --> 00:04:37,000
然后给我一个表扬

108
00:04:38,000 --> 00:04:40,000
你无情你无耻你无理取闹

109
00:04:40,000 --> 00:04:43,000
那你就不无情不无耻不无理取闹吗

110
00:04:43,000 --> 00:04:46,000
LVM提出了一个非常光明的概念

111
00:04:46,000 --> 00:04:47,000
就是IR

112
00:04:47,000 --> 00:04:49,000
所谓的中间表达

113
00:04:49,000 --> 00:04:50,000
C语言对接到IR

114
00:04:50,000 --> 00:04:52,000
C++语言也对接到IR

115
00:04:52,000 --> 00:04:54,000
Word语言对接到IR

116
00:04:54,000 --> 00:04:55,000
包括Java PHP Go

117
00:04:55,000 --> 00:04:57,000
也对接到IR里面

118
00:04:57,000 --> 00:04:58,000
那这个时候连线

119
00:04:58,000 --> 00:05:01,000
就比刚才少了非常的多

120
00:05:01,000 --> 00:05:02,000
编译器前端的工程师

121
00:05:02,000 --> 00:05:04,000
想要新增加一种语言

122
00:05:04,000 --> 00:05:07,000
只需要去了解IR的基本概念就可以了

123
00:05:07,000 --> 00:05:08,000
然后呢

124
00:05:08,000 --> 00:05:09,000
中间的优化

125
00:05:09,000 --> 00:05:10,000
中间的优化他也不需要了解

126
00:05:10,000 --> 00:05:12,000
底层的优化他也不需要了解

127
00:05:12,000 --> 00:05:13,000
而IR呢又对接到

128
00:05:13,000 --> 00:05:14,000
X86 ARM Mixed

129
00:05:14,000 --> 00:05:17,000
Visca C PowerPC等不同的硬件上面

130
00:05:17,000 --> 00:05:20,000
假设华为新增加了一个鲲鹏的硬件

131
00:05:20,000 --> 00:05:21,000
那这个时候呢

132
00:05:21,000 --> 00:05:23,000
只需要对接到这个IR里面

133
00:05:23,000 --> 00:05:25,000
后端的硬件工程师呢

134
00:05:25,000 --> 00:05:26,000
只需要把寄存器

135
00:05:26,000 --> 00:05:27,000
硬件调度

136
00:05:27,000 --> 00:05:28,000
指令调度

137
00:05:28,000 --> 00:05:29,000
这些对接到IR上面

138
00:05:29,000 --> 00:05:32,000
就可以在LVM这个编译体系里面呢

139
00:05:32,000 --> 00:05:34,000
新增加一个硬件了

140
00:05:34,000 --> 00:05:35,000
所以说非常简单

141
00:05:35,000 --> 00:05:38,000
IR的出现了极大的革命了

142
00:05:38,000 --> 00:05:40,000
整个编译体系的概念

143
00:05:40,000 --> 00:05:41,000
再往下看

144
00:05:41,000 --> 00:05:44,000
看看LLVM的一个很重要的特点

145
00:05:44,000 --> 00:05:46,000
就是LibBase LLVM

146
00:05:46,000 --> 00:05:50,000
LLVM基于库来去设计的一个概念

147
00:05:50,000 --> 00:05:53,000
下面看到LLVM所支持的库非常多

148
00:05:53,000 --> 00:05:54,000
刚才已经提到了

149
00:05:54,000 --> 00:05:57,000
LLVM它是一个工具集合

150
00:05:57,000 --> 00:05:58,000
所以这里面呢可以看到

151
00:05:58,000 --> 00:05:59,000
它的前头有C-Lon

152
00:05:59,000 --> 00:06:00,000
有LLDB

153
00:06:00,000 --> 00:06:02,000
还有libc

154
00:06:02,000 --> 00:06:05,000
OpenMP等非常多的工具

155
00:06:05,000 --> 00:06:08,000
去帮助构建整个编译器

156
00:06:08,000 --> 00:06:09,000
在这里面呢

157
00:06:09,000 --> 00:06:10,000
可能很多朋友听过Clang

158
00:06:10,000 --> 00:06:12,000
但是很少人可能会听过下面的

159
00:06:12,000 --> 00:06:14,000
因为大家在工作的当中

160
00:06:14,000 --> 00:06:15,000
可能就不会涉及到

161
00:06:15,000 --> 00:06:16,000
但是你涉及到的时候

162
00:06:16,000 --> 00:06:18,000
你就会发现这些工作

163
00:06:18,000 --> 00:06:19,000
把它揭露出来是非常方便

164
00:06:19,000 --> 00:06:20,000
你去学习

165
00:06:20,000 --> 00:06:21,000
而不需要去学习

166
00:06:21,000 --> 00:06:25,000
1500万行代码的GCC

167
00:06:25,000 --> 00:06:27,000
看1500万行代码

168
00:06:27,000 --> 00:06:29,000
你开我玩笑

169
00:06:34,000 --> 00:06:35,000
那现在来看看

170
00:06:35,000 --> 00:06:36,000
什么是LLVM啊

171
00:06:36,000 --> 00:06:37,000
刚才其实讲了很多

172
00:06:37,000 --> 00:06:39,000
LLVM的一些很牛逼的东西

173
00:06:40,000 --> 00:06:41,000
但LLVM呢

174
00:06:41,000 --> 00:06:42,000
你可以说它是一个编译器

175
00:06:42,000 --> 00:06:43,000
你也可以说

176
00:06:43,000 --> 00:06:44,000
它是一个编译器的前端

177
00:06:44,000 --> 00:06:45,000
你可以说

178
00:06:45,000 --> 00:06:47,000
它是一个编译器的工具集合

179
00:06:47,000 --> 00:06:49,000
或者它是一个编译器的工具链

180
00:06:49,000 --> 00:06:50,000
但实际上

181
00:06:50,000 --> 00:06:51,000
现在为止啊

182
00:06:51,000 --> 00:06:53,000
LLVM的整个项目呢

183
00:06:53,000 --> 00:06:54,000
已经发展成为一个

184
00:06:54,000 --> 00:06:56,000
非常巨大非常庞大的

185
00:06:56,000 --> 00:06:59,000
编译器相关的工具集合

186
00:06:59,000 --> 00:07:02,000
LLVM作为一个编译器的套装

187
00:07:03,000 --> 00:07:06,000
而不要把LLVM这个名字翻译出来

188
00:07:06,000 --> 00:07:07,000
LLVM的全称呢

189
00:07:07,000 --> 00:07:10,000
叫做Low Level Virtual Machine

190
00:07:10,000 --> 00:07:12,000
低层次的虚拟器

191
00:07:12,000 --> 00:07:13,000
这个名字呢

192
00:07:13,000 --> 00:07:14,000
其实已经不符合

193
00:07:14,000 --> 00:07:16,000
LLVM现在的一个定义了

194
00:07:17,000 --> 00:07:18,000
调侃完之后呢

195
00:07:18,000 --> 00:07:19,000
接着真正的来看看

196
00:07:19,000 --> 00:07:22,000
LLVM跟GCC的一个最重要的区别

197
00:07:23,000 --> 00:07:24,000
刚才已经说了

198
00:07:24,000 --> 00:07:26,000
需要实现一个新的语言

199
00:07:26,000 --> 00:07:29,000
LLVM只需要新增一个编译器的前端

200
00:07:29,000 --> 00:07:31,000
去复用优化阶段和后端

201
00:07:32,000 --> 00:07:33,000
而GCC呢

202
00:07:33,000 --> 00:07:34,000
前后端没有很好的结构

203
00:07:34,000 --> 00:07:36,000
所以都搞成一块了

204
00:07:36,000 --> 00:07:37,000
变成一坨了

205
00:07:37,000 --> 00:07:39,000
如果要支持N个目标机器

206
00:07:39,000 --> 00:07:40,000
和M种语言

207
00:07:40,000 --> 00:07:43,000
就需要M乘以M种编译器了

208
00:07:43,000 --> 00:07:45,000
这时候对挑战是非常多的

209
00:07:45,000 --> 00:07:46,000
第二个优点呢

210
00:07:46,000 --> 00:07:48,000
就是LLVM的组件呢

211
00:07:48,000 --> 00:07:49,000
都非常独立

212
00:07:49,000 --> 00:07:51,000
而且还独立成库了

213
00:07:51,000 --> 00:07:53,000
这个特性呢就非常方便呢

214
00:07:53,000 --> 00:07:54,000
LLVM或者独立的库呢

215
00:07:54,000 --> 00:07:56,000
在整个编译的Pip line里面

216
00:07:56,000 --> 00:07:59,000
去集成和优化各种各样的Path

217
00:07:59,000 --> 00:08:02,000
后面讲到的AI编译器

218
00:08:02,000 --> 00:08:04,000
也离不开这种概念

219
00:08:04,000 --> 00:08:05,000
有些编译器呢

220
00:08:05,000 --> 00:08:07,000
会直接附用LLVM的后端

221
00:08:07,000 --> 00:08:08,000
有些编译器呢

222
00:08:08,000 --> 00:08:10,000
就参考接近LLVM的这种方式

223
00:08:10,000 --> 00:08:13,000
所以说它已经成为一个通用的基础结构了

224
00:08:13,000 --> 00:08:14,000
那GCC呢

225
00:08:14,000 --> 00:08:15,000
最大的问题就是

226
00:08:15,000 --> 00:08:18,000
饱受分层和抽象的一个困扰

227
00:08:18,000 --> 00:08:19,000
整个编译器呢

228
00:08:19,000 --> 00:08:23,000
依赖于命令行的设置和全局的数据结构

229
00:08:23,000 --> 00:08:24,000
在这里面呢

230
00:08:24,000 --> 00:08:26,000
吐槽了很多GCC的缺点

231
00:08:26,000 --> 00:08:28,000
但是GCC的优点还是很多的

232
00:08:28,000 --> 00:08:30,000
所以你不要觉得GCC已经没人用了

233
00:08:30,000 --> 00:08:31,000
GCC已经过时了

234
00:08:31,000 --> 00:08:32,000
这种idea

235
00:08:32,000 --> 00:08:34,000
它其实并不成立

236
00:08:34,000 --> 00:08:36,000
只是说它有它的缺点

237
00:08:36,000 --> 00:08:39,000
把LLVM的优点跟GCC的缺点来比

238
00:08:39,000 --> 00:08:41,000
那肯定会觉得LLVM好嘛

239
00:08:41,000 --> 00:08:43,000
但是GCC也有自己的优点

240
00:08:43,000 --> 00:08:45,000
在上一个视频里面呢

241
00:08:45,000 --> 00:08:46,000
已经给大家分享完了

242
00:08:46,000 --> 00:08:48,000
只是这里面强调一下

243
00:08:48,000 --> 00:08:50,000
大家不要先入为主

244
00:08:50,000 --> 00:08:54,000
看了LLVM优点就觉得GCC不好嘞

245
00:08:54,000 --> 00:08:55,000
那往这个图可以看到

246
00:08:55,000 --> 00:08:57,000
左边的这个就是粘土

247
00:08:57,000 --> 00:08:58,000
有点类似于GCC

248
00:08:58,000 --> 00:09:00,000
我可能就一块一块的

249
00:09:00,000 --> 00:09:01,000
然后面积比较大

250
00:09:01,000 --> 00:09:02,000
很难进行组装

251
00:09:02,000 --> 00:09:03,000
而LLVM呢

252
00:09:03,000 --> 00:09:04,000
就像乐高

253
00:09:04,000 --> 00:09:06,000
想自己怎么拼就怎么拼

254
00:09:06,000 --> 00:09:08,000
所以LLVM的发展非常的迅猛

255
00:09:08,000 --> 00:09:11,000
整个市区的怀度也是很高的

256
00:09:11,000 --> 00:09:13,000
接着看一个新的概念

257
00:09:13,000 --> 00:09:14,000
Clang with GCC

258
00:09:14,000 --> 00:09:17,000
那为什么会有Clang这个名字出现呢

259
00:09:17,000 --> 00:09:19,000
Clang又是个什么鬼

260
00:09:19,000 --> 00:09:22,000
Clang跟GCC之间又有什么关系吗

261
00:09:22,000 --> 00:09:24,000
在我经常写代码的时候呢

262
00:09:24,000 --> 00:09:26,000
我就会用到JetBrains

263
00:09:26,000 --> 00:09:28,000
可能有些同学没听过这个名字

264
00:09:28,000 --> 00:09:30,000
但是你可能会听过Python

265
00:09:31,000 --> 00:09:33,000
这两个IDE

266
00:09:33,000 --> 00:09:34,000
那这两个IDE呢

267
00:09:34,000 --> 00:09:37,000
都是出自于JetBrains这家公司

268
00:09:37,000 --> 00:09:39,000
那这家公司呢就做了一个调研

269
00:09:39,000 --> 00:09:42,000
可以看到使用GCC编译器

270
00:09:42,000 --> 00:09:44,000
居然还有78%的用户

271
00:09:44,000 --> 00:09:45,000
非常多

272
00:09:45,000 --> 00:09:49,000
而使用Clang有43%的用户

273
00:09:49,000 --> 00:09:51,000
为什么GCC这么多

274
00:09:51,000 --> 00:09:54,000
刚才讲的LLVM去了哪里呢

275
00:09:54,000 --> 00:09:55,000
好像没有LLVM吗

276
00:09:55,000 --> 00:09:57,000
你讲了LLVM这么多优点

277
00:09:57,000 --> 00:09:59,000
LLVM怎么消失了呢

278
00:09:59,000 --> 00:10:00,000
其实呢

279
00:10:00,000 --> 00:10:03,000
Clang只是作为LLVM编译体系

280
00:10:03,000 --> 00:10:05,000
或者编译套装里面的前端

281
00:10:05,000 --> 00:10:08,000
特别是使用C, C++, Object C

282
00:10:08,000 --> 00:10:10,000
它都会用到Clang的前端

283
00:10:10,000 --> 00:10:12,000
后面就附用了LLVM的优化器

284
00:10:12,000 --> 00:10:14,000
LLVM的后端

285
00:10:14,000 --> 00:10:17,000
所以用户看到的是LLVM的前端Clang

286
00:10:17,000 --> 00:10:19,000
Clang作为LLVM的前端

287
00:10:19,000 --> 00:10:21,000
看看它具体做哪些工作

288
00:10:21,000 --> 00:10:23,000
首先以C, C++, Object C

289
00:10:23,000 --> 00:10:25,000
这些高级的语言作为输入

290
00:10:25,000 --> 00:10:27,000
输进去Clang的前端

291
00:10:27,000 --> 00:10:29,000
编译器就会对这些高级的语言

292
00:10:29,000 --> 00:10:30,000
做一些词法的分析

293
00:10:30,000 --> 00:10:32,000
然后再接给语法的分析

294
00:10:32,000 --> 00:10:34,000
最后再做语义的分析

295
00:10:34,000 --> 00:10:36,000
执行完语义的分析之后

296
00:10:36,000 --> 00:10:39,000
基本上前端的所有的分析和分解的工作

297
00:10:39,000 --> 00:10:40,000
已经做完了

298
00:10:40,000 --> 00:10:42,000
最后就生成一个IR

299
00:10:42,000 --> 00:10:43,000
就IR生成

300
00:10:43,000 --> 00:10:46,000
LLVM IR连接前端和后端

301
00:10:46,000 --> 00:10:47,000
那后端呢

302
00:10:47,000 --> 00:10:49,000
现在一般只优化器和后端

303
00:10:49,000 --> 00:10:51,000
把两个结合在一起

304
00:10:51,000 --> 00:10:53,000
经过前端对高级语言的转译

305
00:10:53,000 --> 00:10:55,000
生成LLVM的IR之后呢

306
00:10:55,000 --> 00:10:56,000
就会给LLVM的后端

307
00:10:56,000 --> 00:10:58,000
做一些真正的编译优化

308
00:10:58,000 --> 00:11:00,000
还有后端的目标代码生成

309
00:11:00,000 --> 00:11:03,000
下面再看一个更详细一点的图

310
00:11:03,000 --> 00:11:04,000
那这个呢

311
00:11:04,000 --> 00:11:07,000
就是我画出来的一个LLVM的

312
00:11:07,000 --> 00:11:08,000
总体的架构图

313
00:11:08,000 --> 00:11:09,000
还是分成三段

314
00:11:09,000 --> 00:11:11,000
前面的就是前端

315
00:11:11,000 --> 00:11:13,000
中间的是优化层

316
00:11:13,000 --> 00:11:14,000
最后就是编译器的后端

317
00:11:14,000 --> 00:11:16,000
刚才讲了Clang的前端呢

318
00:11:16,000 --> 00:11:18,000
会做一些词法语法语义的分析

319
00:11:18,000 --> 00:11:20,000
生成IR

320
00:11:20,000 --> 00:11:22,000
但是在中间编译层

321
00:11:22,000 --> 00:11:23,000
或者中间编译优化层呢

322
00:11:23,000 --> 00:11:25,000
会有非常多的Path

323
00:11:25,000 --> 00:11:26,000
不同的Path

324
00:11:26,000 --> 00:11:27,000
会对IR

325
00:11:27,000 --> 00:11:28,000
进行一些不同的优化处理

326
00:11:28,000 --> 00:11:29,000
将会在下一节

327
00:11:29,000 --> 00:11:30,000
去详细的展开

328
00:11:30,000 --> 00:11:32,000
这些IR都做了哪些工作

329
00:11:32,000 --> 00:11:35,000
这些Path都有哪些不一样的优化

330
00:11:35,000 --> 00:11:36,000
优化完之后呢

331
00:11:36,000 --> 00:11:37,000
编译器还是以LLVM

332
00:11:37,000 --> 00:11:39,000
作为一个中间表达的输出

333
00:11:39,000 --> 00:11:40,000
然后给后端

334
00:11:40,000 --> 00:11:42,000
后端会根据不同的硬件

335
00:11:42,000 --> 00:11:44,000
生成与硬件相关的机器码

336
00:11:44,000 --> 00:11:46,000
那后端这里面做了哪些工作呢

337
00:11:46,000 --> 00:11:48,000
可以看一下上面的这一排

338
00:11:48,000 --> 00:11:50,000
首先会对一些机器的指令

339
00:11:50,000 --> 00:11:51,000
进行选择

340
00:11:51,000 --> 00:11:53,000
然后呢对寄存器进行分配

341
00:11:53,000 --> 00:11:55,000
接着会做一些指令的调度

342
00:11:55,000 --> 00:11:56,000
指令调度完呢

343
00:11:56,000 --> 00:11:58,000
会对执行的代码进行布局

344
00:11:58,000 --> 00:11:59,000
执行完布局之后呢

345
00:11:59,000 --> 00:12:00,000
就是最后一步

346
00:12:00,000 --> 00:12:02,000
对代码进行组装生成硬件

347
00:12:02,000 --> 00:12:04,000
所对应的汇编指令

348
00:12:04,000 --> 00:12:07,000
这个呢就是整体的LLVM的架构图了

349
00:12:07,000 --> 00:12:09,000
将会在下一节里面

350
00:12:09,000 --> 00:12:10,000
详细展开

351
00:12:10,000 --> 00:12:13,000
每一段都做哪些详细的工作

352
00:12:13,000 --> 00:12:16,000
下面呢来到实操的部分

353
00:12:16,000 --> 00:12:17,000
首先LLVM

354
00:12:17,000 --> 00:12:18,000
它有个原代码

355
00:12:18,000 --> 00:12:19,000
就是C代码

356
00:12:19,000 --> 00:12:22,000
然后会把它进行一系列的预处理

357
00:12:22,000 --> 00:12:23,000
然后变成.i文件

358
00:12:23,000 --> 00:12:24,000
接着呢

359
00:12:24,000 --> 00:12:26,000
真正的用前端做一个编译

360
00:12:26,000 --> 00:12:27,000
变成一个IR

361
00:12:27,000 --> 00:12:28,000
那这个IR的表示呢

362
00:12:28,000 --> 00:12:29,000
有LL有BC

363
00:12:29,000 --> 00:12:31,000
两种不同的表示方式

364
00:12:31,000 --> 00:12:33,000
那BC呢就是所谓的字节码

365
00:12:33,000 --> 00:12:35,000
LL呢就方便眼睛看的

366
00:12:35,000 --> 00:12:36,000
然后通过LLC

367
00:12:36,000 --> 00:12:38,000
LLVM的另外一个工具

368
00:12:38,000 --> 00:12:42,000
然后把IR变成一个汇编的机器码

369
00:12:42,000 --> 00:12:43,000
最后两步呢

370
00:12:43,000 --> 00:12:45,000
就是把汇编码

371
00:12:45,000 --> 00:12:47,000
把机器码变成一个二进制的文件

372
00:12:47,000 --> 00:12:49,000
然后变成一个可执行的二进制

373
00:12:49,000 --> 00:12:51,000
那开始吧

374
00:12:59,000 --> 00:13:00,000
第一步呢

375
00:13:00,000 --> 00:13:02,000
对C++的原代码进行预处理

376
00:13:03,000 --> 00:13:04,000
生成.i文件

377
00:13:04,000 --> 00:13:06,000
然后打开.i文件

378
00:13:06,000 --> 00:13:07,000
看看是什么东西

379
00:13:07,000 --> 00:13:08,000
可以看到

380
00:13:08,000 --> 00:13:09,000
打开文件之后呢

381
00:13:09,000 --> 00:13:10,000
把红展开

382
00:13:11,000 --> 00:13:13,000
把input包含进来

383
00:13:14,000 --> 00:13:15,000
最后面500多行

384
00:13:15,000 --> 00:13:17,000
最后面500多行就是实际的代码了

385
00:13:19,000 --> 00:13:20,000
第二步

386
00:13:20,000 --> 00:13:21,000
-emit-llvm

387
00:13:22,000 --> 00:13:25,000
把刚才预处理过后的代码.i文件呢

388
00:13:25,000 --> 00:13:28,000
导出成.bc形式的llvm IR

389
00:13:39,000 --> 00:13:40,000
当然了

390
00:13:40,000 --> 00:13:42,000
还可以用另外一种方式

391
00:13:42,000 --> 00:13:45,000
导出成可以识别的ll的.ir文件

392
00:14:06,000 --> 00:14:07,000
第8行到14行呢

393
00:14:07,000 --> 00:14:08,000
就是实际的

394
00:14:08,000 --> 00:14:09,000
能看的

395
00:14:09,000 --> 00:14:11,000
llvmir的一个正式的表达

396
00:14:12,000 --> 00:14:14,000
接着对llvm的.ir

397
00:14:14,000 --> 00:14:17,000
通过llc导出成.est

398
00:14:22,000 --> 00:14:25,000
可以看到这里面全都是一些汇编指令

399
00:14:35,000 --> 00:14:36,000
最后一步呢

400
00:14:36,000 --> 00:14:38,000
就是变成可自行的二进制文件了

401
00:14:42,000 --> 00:14:44,000
在最后环节正式结束之前呢

402
00:14:44,000 --> 00:14:46,000
还有另外一个命令

403
00:14:47,000 --> 00:14:48,000
comply的一个编译过程

404
00:14:48,000 --> 00:14:49,000
里面呢

405
00:14:49,000 --> 00:14:50,000
分为七个步骤

406
00:14:50,000 --> 00:14:51,000
0到6

407
00:14:51,000 --> 00:14:52,000
那0呢就是输入

408
00:14:52,000 --> 00:14:53,000
1就是预处理

409
00:14:53,000 --> 00:14:54,000
2就是编译

410
00:14:54,000 --> 00:14:56,000
3就是到后端的优化

411
00:14:56,000 --> 00:14:57,000
第4步呢

412
00:14:57,000 --> 00:14:58,000
就是产生汇变的指令

413
00:14:58,000 --> 00:15:00,000
第5步就做一些酷的链接

414
00:15:00,000 --> 00:15:01,000
第6步

415
00:15:01,000 --> 00:15:04,000
生成x86可执行的程序

