1
00:00:00,000 --> 00:00:10,000
哈喽,大家好,我是那个没什么在观看,但是我依然在坚持在遵命。

2
00:00:10,000 --> 00:00:16,000
今天我主要是想给大家一起去探讨一下AI框架到底有什么用。

3
00:00:16,000 --> 00:00:25,000
这个灵魂问题,领导经常会挑战我们这些工程师,你岛古你搞这个AI框架到底有什么用?

4
00:00:25,000 --> 00:00:30,000
你要是做开源的话怎么给我们带来商业上的变现呢?

5
00:00:30,000 --> 00:00:31,000
过来啊!

6
00:00:31,000 --> 00:00:38,000
经常受到这样的挑战,所以这一节我也是想简单的尝试的去回答这个问题。

7
00:00:38,000 --> 00:00:48,000
如果下次领导或者有其他人在挑战我们,我们可以把这些相关的内容搬出来给他们看看,到底我们做这个东西有没有用。

8
00:00:48,000 --> 00:00:51,000
出来干掉了!你以为我找你啊?干掉了!

9
00:00:51,000 --> 00:00:59,000
在这里面我们可以看到左上角的之前的那两个logo其实已经去掉了。

10
00:00:59,000 --> 00:01:06,000
这里面就不再出现深藤和MindSpot的一个大大的logo,非常不和谐,也不再挂广告了。

11
00:01:06,000 --> 00:01:10,000
在这一节里面我们来看看今天要讲的内容。

12
00:01:10,000 --> 00:01:16,000
第一个就是深度学习的一个基础,不知道那条线为啥这样飞出去了。

13
00:01:16,000 --> 00:01:19,000
第二个就是AI框架的一个具体的作用。

14
00:01:19,000 --> 00:01:25,000
第三个就是做AI框架的一个目的,或者AI框架有什么帮助对我们。

15
00:01:25,000 --> 00:01:32,000
正式开始之前,我们首先要来回顾一下深度学习的一个基础的概念。

16
00:01:32,000 --> 00:01:37,000
因为整个AI框架主要是为深度学习而去服务的。

17
00:01:37,000 --> 00:01:43,000
搞深度学习很重要的第一个,首先要定义一个神经网络。

18
00:01:44,000 --> 00:01:48,000
这里面我们以马东梅作为例子去做一个预测。

19
00:01:48,000 --> 00:01:52,000
它到底是一个马什么梅呢?还是什么东梅呢?

20
00:01:59,000 --> 00:02:02,000
那我们就需要去定义一个神经网络。

21
00:02:02,000 --> 00:02:09,000
中间的这一个就是我们的神经网络层,每一层有大量的连接线。

22
00:02:09,000 --> 00:02:16,000
这些连接线就构成我们的权重W1、W2、W3,各种各样的权重。

23
00:02:16,000 --> 00:02:19,000
网络模型越多,我们的权重参数就越大。

24
00:02:20,000 --> 00:02:25,000
第二个,有了神经网络定义之后,我们需要定义我们的优化的目标。

25
00:02:25,000 --> 00:02:35,000
就是告诉我们的程序或者告诉深度学习,我需要预测这个人到底是个什么东西,或者他到底是个什么梅。

26
00:02:35,000 --> 00:02:37,000
行,大爷,你先量了吧。

27
00:02:38,000 --> 00:02:46,000
接着我们定义了损失函数和优化器之后,第三步就是计算T度并更新权重了。

28
00:02:46,000 --> 00:02:52,000
计算T度就跟我们上一节课去讲自动微分的原理有点像。

29
00:02:52,000 --> 00:02:59,000
但是这里面不完全是实现那套方式,而是通过反向传播对T度进行累积。

30
00:02:59,000 --> 00:03:03,000
单门讲反向传播算法的时候会去介绍的。

31
00:03:03,000 --> 00:03:08,000
我们先简单粗熟的去理解一下,计算T度并更新权重参数。

32
00:03:08,000 --> 00:03:25,000
就是计算每一个权重W1、W2、WN的一个权重参数,然后从而不断的形成一个循环去更新我们的权重参数,使得我们的损失值越小越好。

33
00:03:25,000 --> 00:03:36,000
就我们的有了AI框架的基础之后,下面我们来看看实现一个简单的神经网络里面的一个算子是怎么实现的。

34
00:03:36,000 --> 00:03:43,000
我们可以看到实现一个卷机的算子,卷机简单的就是一个滤波的操作。

35
00:03:43,000 --> 00:03:51,000
我们从原始的图像,也就是ON到OC里面,然后不断的去迭代每一个Batch的数据。

36
00:03:51,000 --> 00:04:03,000
然后在这个窗口里面,不断的去划动我们的卷机盒,然后去计算卷机盒跟原始模板的一个数,然后得到这个数,进行累积。

37
00:04:03,000 --> 00:04:10,000
最终呢就得到我们的整一个,得到我们整个卷机盒的数值。

38
00:04:10,000 --> 00:04:17,000
看上去很复杂,可能你完全听不懂。这里面嵌套了1、2、3、4、5、6、7。

39
00:04:17,000 --> 00:04:26,000
7个4具体有什么用?没关系,我们只是讲了一个简单的例子,告诉大家实现一个神经网络非常复杂。

40
00:04:26,000 --> 00:04:31,000
要是在CPU里面执行这么复杂的4循环操作,其实是很好使的。

41
00:04:31,000 --> 00:04:41,000
所以就提出了一个概念,怎么样去实现多线程的算子加速呢?就是我实现一个算子是非常勇于的,我需要进行多线程的加速。

42
00:04:42,000 --> 00:04:51,000
那第二个,我们以MaxPulin这个算子为例。MaxPulin我们要实现这个算子,其实同样非常复杂。

43
00:04:51,000 --> 00:05:08,000
里面嵌套了很多个4,4里面又有4。那这个时候我们就有个问题,如何把这些大量的并行的操作跑在GPU、NPU、一些通用或者AI加速芯片上面呢?这是第二个难题。

44
00:05:08,000 --> 00:05:19,000
假设我们现在对每个算子都已经实现了一个具体的操作,例如卷集我已经实现出来了,对应WebLut,然后我也实现了一个WebLut出来。

45
00:05:19,000 --> 00:05:27,000
同样MaxPulin、全连接网络、SoftMesh我都实现了,我如何去把这些算子串起来呢?

46
00:05:27,000 --> 00:05:40,000
如果假设只是简单的、严工的去写一个函数,把这些算子串起来,那我们如何去做一些反向的操作呢?也就是后向的算子怎么去实现呢?

47
00:05:40,000 --> 00:05:51,000
我们只是实现了一个正向的网络堆叠,后向的我们根本没有去实现。这些神经网络的算子都是我自己去实现的。

48
00:05:51,000 --> 00:05:56,000
怎么样去封装好这些算子,然后暴露给其他用户呢?

49
00:05:56,000 --> 00:06:06,000
第三个,可以看到这些代码都非常勇于,如何优化这一份代码是个很复杂的工程问题。

50
00:06:06,000 --> 00:06:18,000
所以面向很多问题,我们现在来看看了AI框架,整个框架面对不同层或者不同层级的时候有哪些问题?

51
00:06:18,000 --> 00:06:34,000
第一个就是前端,前端我们用来看看是面向用户的。这个时候如何灵活的表达一个深度学习模型,也就是怎么把刚才的左边的这个模型很好的表示出来。

52
00:06:34,000 --> 00:06:44,000
这个是面向前端用户的。第二个就是算子,我们刚才讲到的卷迹算子,我们怎么样才能保证每个算子的执行效率非常高。

53
00:06:44,000 --> 00:06:49,000
它的泛化性非常好,也就是每个算子的执行都是正确的。

54
00:06:49,000 --> 00:06:57,000
无论我输的是大的图片,小的图片,非常多的batch,少的batch,它的计算结果都应该能够是正确的。

55
00:06:57,000 --> 00:07:03,000
而且算子的泛化性也做得很好,不同的入餐它都能够处理。

56
00:07:04,000 --> 00:07:16,000
这个第三步就是求导,如何更加有效的去对我们的网络模型求导,然后通过系统进行表示出来。这是第三个难题。

57
00:07:16,000 --> 00:07:28,000
第四个就是后端跟系统相关的,可能用户看不到,但是如果我拿了另外一个不同的事背上面去跑,我这个神经网络还能跑得通吗?

58
00:07:28,000 --> 00:07:41,000
最后一点就是如何自动的优化和调度网络模型进行计算。简单的来说就是程序员写了一堆代码,这些都是一些简程序式的代码。

59
00:07:41,000 --> 00:07:47,000
如何对这份代码进行优化,其实是一个很大的系统工程问题。

60
00:07:48,000 --> 00:07:55,000
为了粗暴的去解决我们刚才的一些问题,这里面举两个极端的例子。

61
00:07:55,000 --> 00:08:07,000
第一个就是用高级语言从头去实现一个网络模型的计算。右边的这个就是简单的一个计算,然后通过计算得到C之后,然后去求它的T度。

62
00:08:07,000 --> 00:08:16,000
这个时候我们可能会用一些高级语言自己去实现右边的计算公式。

63
00:08:16,000 --> 00:08:25,000
我要做反向的时候可能就需要手工的去做一个反向的操作,严格的去把一些需要反向的东西记录下来。

64
00:08:26,000 --> 00:08:36,000
这种方式就是Python Like的方式。这种方式的好处就是跟Python的原生代码非常像,然后应用性非常高。

65
00:08:36,000 --> 00:08:45,000
但是它所谓的应用性高并不是我们真正理解的应用性高。这个时候我们还停留在非常初始的阶段。

66
00:08:45,000 --> 00:08:59,000
第二种就是另外一种极端的方式。下面是华为的生腾系列的一个服务器版卡,这是我从网上沾下来的图,所以不要care这到底是一个GPU还是NPU。

67
00:08:59,000 --> 00:09:14,000
我们可能会为一些常用的模型在NPU加速上面去做一个简单的实现,就是import library进去,然后把Library里面的WestNet50或者WestNet101这些直接写死了。

68
00:09:14,000 --> 00:09:20,000
用户直接调用我这个模型就可以了,我帮你已经做好了高度的封装和优化。

69
00:09:20,000 --> 00:09:28,000
这个就是另外一个AI框架的极端,也就是非常注重我们的效率基于酷的实现方式。

70
00:09:28,000 --> 00:09:41,000
刚才那两种方式都是非常极端的,实际上我们为了解决很多刚才提到的一些问题,并不会去真正使用刚才那两种方式。

71
00:09:41,000 --> 00:09:58,000
我们看看这个图,下面我们是芯片使能,假设我们的芯片有生长的芯片,有CPU的芯片,还有CUDA的芯片,还有一些其他杂七杂八的芯片,例如苹果的,高通的,马力的GPU,这些一系列的芯片。

72
00:09:58,000 --> 00:10:09,000
AI框架在核心层就是我们中间这个框,它会做一些数据处理,开发接口,调试调油,边运和执行,还有推理部署相关的组件。

73
00:10:09,000 --> 00:10:17,000
向下主要是对接一些芯片,向上主要是对接一些算法,就是承载我们的算法。

74
00:10:17,000 --> 00:10:39,000
所以AI框架起到了两个作用,第一个对下的芯片使能,对上的承载算法应用,算法应用不可能直接到芯片的,它需要一个框架或者一个库去承载,这个时候AI框架就变得非常核心了,因为现在我们找工作都知道,不懂点算法,可能工作都不好找了。

75
00:10:40,000 --> 00:11:05,000
下面我们看看AI框架真正的目的,或者我们来语言化一点去表示,下面这个是我所总结的一些字眼,大家看看就好了,其实我们更多时候是凭借用户的感觉或者自己的第一个反应,我觉得这个才是最核心的,或者你觉得AI框架有什么用,它真的就是能帮你解决实际的问题的。

76
00:11:05,000 --> 00:11:35,000
那作为我们AI框架的开发人或者我们开发者来说,我们希望AI框架对用户提供一个非常灵活的编程模型和编程接口,就是对用户来说有用的,我们可以帮助用户去做一些自动的计算图的推导,还有比较好的跟现有的AI生态进行融合,另外的话可能还会提供一些非常直观的模型构建的方式,例如现在MNLAB,HungenFace推出很多套件,他们就提供了很多的方式,他们就提供了很多的方式,他们就提供了很多的方式,他们就提供了很多的方式,他们就提供了很多的方式,他们就提供了很多的方式,他们就提供了

77
00:11:35,000 --> 00:12:05,000
他们就提供了很多基于Pytouch至上构建的模型的构建方式,还有Pytouch提供非常简洁的神经网络的编程语言接口,这个就是我们对上希望能够为用户解决的一些问题,对下我们其实更希望提供一些计算能力的解决或者提升我们的效率,那这个可能就是学计算机或者学软件的人更加关注的,提供一个高效可以扩展的计算能力,例如做一些自动的计算,例如做一些自动的计算,例如做一些自动的计算,例如做一些自动的计算,例如做一些自动的计算,例如做一些自动的计算,例如做一些自动的计算,例如做

78
00:12:05,000 --> 00:12:28,000
用编译的优化算法,例如在编译器里面我们会做一些资表达式的消除,类合的融合,还有类存的优化,让我们的计算图或者我们的神经网络跑得更快,那第二个就是根据不同的硬件体系结构和硬件事贝做一些自动化的并行,自动化的加速,这个就是底下的能力。

79
00:12:28,000 --> 00:12:58,000
讲完这一节课之后,我们回顾了深度学习的基本流程有三步,第一网络模型,第一损失函数,然后球片倒霉分,第二个就是了解了AI框架的具体作用,向上是成绩算法,向下是芯片使能,第三点就是知道了AI框架具体希望能够给用户对上提供一个编程接口,对下提供更好的算力的目的。

80
00:12:58,000 --> 00:13:00,000
好了,谢谢各位,掰了个掰。

