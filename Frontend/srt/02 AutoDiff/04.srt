1
00:00:00,000 --> 00:00:10,000
Hello,大家好,我是总笔将,欢迎来到总笔的课堂

2
00:00:10,000 --> 00:00:17,000
上一节课真的是不管是你听的还是我讲的都是脑瓜子嗡嗡的

3
00:00:17,000 --> 00:00:22,000
这也是所有的分享里面最难的了

4
00:00:22,000 --> 00:00:27,000
那今天呢我想给大家一起去看一看自动微分是怎么实现的

5
00:00:27,000 --> 00:00:29,000
就是它的具体实现方式了

6
00:00:29,000 --> 00:00:33,000
自动微分的具体实现方式呢分三个

7
00:00:33,000 --> 00:00:36,000
第一个是基于表达式或者基于图的

8
00:00:36,000 --> 00:00:39,000
那第二个呢就是操作符存在这个概念

9
00:00:39,000 --> 00:00:41,000
基本上只有在高级语言里面才会有的

10
00:00:41,000 --> 00:00:44,000
那第三个呢就是源码转换

11
00:00:44,000 --> 00:00:47,000
源码转换也是最难实现最复杂的

12
00:00:47,000 --> 00:00:51,000
所以呢我们会在下面两节分享里面呢

13
00:00:51,000 --> 00:00:55,000
去讲讲基于表达式或者操作符里面去怎么去实现的

14
00:00:55,000 --> 00:00:58,000
基于源码转换啊说实话你放过我吧

15
00:00:58,000 --> 00:01:00,000
这些实现起来太麻烦了

16
00:01:00,000 --> 00:01:02,000
我们了解基本概念就好了

17
00:01:02,000 --> 00:01:06,000
基于表达式或者表达方法去实现的自动微分

18
00:01:06,000 --> 00:01:10,000
就有应该在一二年推出的AutoDiff

19
00:01:10,000 --> 00:01:13,000
那AutoDiff呢它基于表达式的几种实现方式呢

20
00:01:13,000 --> 00:01:17,000
主要是它封装了基本的表达作为一个括弹数

21
00:01:17,000 --> 00:01:20,000
这是我的加减乘除的每一次的导数

22
00:01:20,000 --> 00:01:23,000
我都要去手工的写一遍

23
00:01:23,000 --> 00:01:28,000
运行的时候呢大家会去记录基本表达式的一个相关的组合关系

24
00:01:28,000 --> 00:01:31,000
就我的加减乘除这些都要记下来

25
00:01:31,000 --> 00:01:33,000
我加我要算一遍加

26
00:01:33,000 --> 00:01:36,000
然后加的导数我要记下来

27
00:01:36,000 --> 00:01:38,000
然后去不是人工的记啊

28
00:01:38,000 --> 00:01:40,000
是那个写程序的时候记下来啊

29
00:01:40,000 --> 00:01:43,000
然后最后再进行一个组合

30
00:01:43,000 --> 00:01:46,000
就实现的过程非常之复杂

31
00:01:46,000 --> 00:01:50,000
第二种实现方式呢就是操作符存在

32
00:01:51,000 --> 00:01:54,000
一看到这个logo呢我就不困了

33
00:01:57,000 --> 00:01:59,000
这个呢就是PyTorch

34
00:01:59,000 --> 00:02:01,000
其余操作符存在除了PyTorch呢

35
00:02:01,000 --> 00:02:04,000
其实它没有一个非常之明显的界限

36
00:02:04,000 --> 00:02:07,000
TensorFlow也是基于操作符存在的方式去实现的

37
00:02:07,000 --> 00:02:10,000
只是可能细节上呢有些不一样

38
00:02:11,000 --> 00:02:14,000
那操作符存在呢就是利用语言的多态性啊

39
00:02:14,000 --> 00:02:18,000
用操作符去存在基本的运算表达式

40
00:02:18,000 --> 00:02:21,000
也就是我的加减乘除求根号这些

41
00:02:21,000 --> 00:02:22,000
它都重载了一遍

42
00:02:22,000 --> 00:02:26,000
那重载的过程当中呢就用了我们的一个记录器

43
00:02:26,000 --> 00:02:28,000
把这些计算记录下来

44
00:02:28,000 --> 00:02:31,000
然后呢根据链式求答法则组合

45
00:02:31,000 --> 00:02:34,000
那第三种呢就是我们的源码转换啊

46
00:02:34,000 --> 00:02:36,000
源码转换最典型的代表呢

47
00:02:36,000 --> 00:02:39,000
就是华为自研的一个Modern Sport

48
00:02:39,000 --> 00:02:41,000
就我们叫做头包啊

49
00:02:41,000 --> 00:02:45,000
简单的Mine就是头嘛Sport就是包子嘛

50
00:02:45,000 --> 00:02:46,000
对简单的头包

51
00:02:46,000 --> 00:02:48,000
实际上呢它不叫头包

52
00:02:48,000 --> 00:02:51,000
它有它自己的中文名叫做声丝

53
00:02:51,000 --> 00:02:52,000
对吧声腾的声

54
00:02:52,000 --> 00:02:54,000
声腾产业线里面的声

55
00:02:54,000 --> 00:02:55,000
思考的思

56
00:02:55,000 --> 00:02:56,000
是Sport嘛

57
00:02:56,000 --> 00:02:57,000
思考啊

58
00:02:57,000 --> 00:03:00,000
最主要的是基于一个语言的预处理

59
00:03:00,000 --> 00:03:03,000
或者编译器或者解析器去进行一个扩展的

60
00:03:03,000 --> 00:03:06,000
把我们的Python的源码进行转换

61
00:03:06,000 --> 00:03:07,000
转换完之后呢

62
00:03:07,000 --> 00:03:12,000
再对它这些计算呢进行一个组织整理

63
00:03:12,000 --> 00:03:14,000
然后最后通过链式求答法则

64
00:03:14,000 --> 00:03:15,000
然后进行组合的

65
00:03:15,000 --> 00:03:17,000
所以呢它会比较复杂

66
00:03:17,000 --> 00:03:19,000
它需要去写一个编译器啊

67
00:03:19,000 --> 00:03:21,000
或者对我们的源码的解析器啊

68
00:03:21,000 --> 00:03:24,000
嗯这里面呢就不会展开太多

69
00:03:24,000 --> 00:03:27,000
又回到我们这一篇文章了

70
00:03:27,000 --> 00:03:30,000
这篇文章呢还是非常的经典的

71
00:03:30,000 --> 00:03:31,000
应该是18年的时候出的

72
00:03:31,000 --> 00:03:34,000
这里面呢就总结了非常多的AI框架

73
00:03:34,000 --> 00:03:37,000
然后包括刚才说的Tangent啊PyTorch啊

74
00:03:37,000 --> 00:03:40,000
还有那个Autogrid啊

75
00:03:40,000 --> 00:03:42,000
不同好多框架

76
00:03:42,000 --> 00:03:43,000
但只是到18年了

77
00:03:43,000 --> 00:03:44,000
MineSport还没有推出

78
00:03:45,000 --> 00:03:47,000
嗯TensorFlow它没有统计在这里面

79
00:03:47,000 --> 00:03:49,000
它就总结了就三种模式

80
00:03:49,000 --> 00:03:51,000
这里面我们以这三种模式来展开

81
00:03:51,000 --> 00:03:53,000
那第一种呢就是Library

82
00:03:53,000 --> 00:03:55,000
我们看一下基于库的一个表达方式

83
00:03:55,000 --> 00:03:58,000
我们以一个f x y z

84
00:03:58,000 --> 00:04:02,000
这一个简单的表达去去展开介绍一下

85
00:04:02,000 --> 00:04:04,000
嗯我们手工呢去展开一下

86
00:04:04,000 --> 00:04:06,000
首先我们把x加y展开

87
00:04:06,000 --> 00:04:10,000
然后呢我们再把x加y除以z展开成为b

88
00:04:10,000 --> 00:04:13,000
所以呢我们就变成下面两套公式呢

89
00:04:13,000 --> 00:04:14,000
那有了下面两套公式

90
00:04:14,000 --> 00:04:16,000
我对a进行求导的时候

91
00:04:16,000 --> 00:04:18,000
我需要人工的去算一遍

92
00:04:18,000 --> 00:04:19,000
我需要人工的去算一遍

93
00:04:19,000 --> 00:04:20,000
我算da的导数

94
00:04:20,000 --> 00:04:23,000
那我们是不是算dx加dy啊

95
00:04:23,000 --> 00:04:24,000
那我算除的导数呢

96
00:04:24,000 --> 00:04:26,000
可能会稍微复杂一点啊

97
00:04:26,000 --> 00:04:27,000
除了就更复杂了

98
00:04:27,000 --> 00:04:28,000
我们就不再展开

99
00:04:28,000 --> 00:04:31,000
基本就是求导法则去展开的

100
00:04:31,000 --> 00:04:33,000
优点就是实现很简单

101
00:04:33,000 --> 00:04:35,000
我可以用任何语言就可以去实现了

102
00:04:35,000 --> 00:04:39,000
你想想我去实现a等于x加y

103
00:04:39,000 --> 00:04:40,000
然后da的导数

104
00:04:40,000 --> 00:04:42,000
这个很好实现呢

105
00:04:42,000 --> 00:04:46,000
缺点就是我需要去了解互联数

106
00:04:46,000 --> 00:04:49,000
然后去使用互联数的底层进行编码

107
00:04:49,000 --> 00:04:52,000
没办法去用原语言进行编码

108
00:04:52,000 --> 00:04:54,000
TensorFlow觉得很别扭

109
00:04:54,000 --> 00:04:56,000
你必须去记它的规则

110
00:04:56,000 --> 00:04:59,000
就因为它部分的采用了这种思想

111
00:04:59,000 --> 00:05:03,000
那下面我们来看看一些实际上的代码

112
00:05:03,000 --> 00:05:04,000
大家不要慌

113
00:05:04,000 --> 00:05:06,000
看到代码千万不要慌

114
00:05:06,000 --> 00:05:07,000
啊这边很简单

115
00:05:07,000 --> 00:05:08,000
我的adadd

116
00:05:08,000 --> 00:05:09,000
我的数有很多个啊

117
00:05:10,000 --> 00:05:14,000
x还有我的y还有我的j

118
00:05:14,000 --> 00:05:16,000
分别都是一对的一对的pair的

119
00:05:16,000 --> 00:05:17,000
为啥呢

120
00:05:17,000 --> 00:05:19,000
因为我说的时候我要算它的导数啊

121
00:05:19,000 --> 00:05:20,000
我要取它的导数啊

122
00:05:20,000 --> 00:05:21,000
对吧

123
00:05:21,000 --> 00:05:22,000
我输入等于输出

124
00:05:22,000 --> 00:05:24,000
如果它是在C++里面

125
00:05:24,000 --> 00:05:25,000
它是一个取d子的话

126
00:05:25,000 --> 00:05:28,000
那我可以拿到它的自己的值吗

127
00:05:28,000 --> 00:05:29,000
那这个时候呢

128
00:05:29,000 --> 00:05:31,000
我的z就等于x加y

129
00:05:31,000 --> 00:05:33,000
我的dz就是我的输出啊

130
00:05:33,000 --> 00:05:34,000
等于dx加dy

131
00:05:34,000 --> 00:05:35,000
那实际上呢

132
00:05:35,000 --> 00:05:37,000
就对应我们刚才的两条公式

133
00:05:37,000 --> 00:05:39,000
那一个除的一个方式呢

134
00:05:39,000 --> 00:05:41,000
同样我的输入呢

135
00:05:41,000 --> 00:05:42,000
也是一对一对的

136
00:05:42,000 --> 00:05:44,000
里面的具体的计算呢

137
00:05:44,000 --> 00:05:46,000
还是那个计算

138
00:05:46,000 --> 00:05:47,000
那怎么去用啊

139
00:05:48,000 --> 00:05:49,000
用很简单的是吧

140
00:05:49,000 --> 00:05:51,000
我的库都已经实现好了

141
00:05:51,000 --> 00:05:52,000
用的时候呢

142
00:05:52,000 --> 00:05:55,000
你看一下我直接去掉这个add

143
00:05:55,000 --> 00:05:56,000
adadd

144
00:05:56,000 --> 00:05:57,000
然后把数据输进来

145
00:05:57,000 --> 00:05:58,000
不就可以用了吗

146
00:05:58,000 --> 00:06:01,000
然后我去掉我的addivide

147
00:06:01,000 --> 00:06:02,000
就可以输出来

148
00:06:02,000 --> 00:06:03,000
直接可以用了

149
00:06:03,000 --> 00:06:06,000
我对这个公式进行使用的时候

150
00:06:06,000 --> 00:06:08,000
我不去掉两次不就得了吗

151
00:06:08,000 --> 00:06:09,000
哎对

152
00:06:09,000 --> 00:06:10,000
麻烦吧

153
00:06:10,000 --> 00:06:11,000
麻烦

154
00:06:11,000 --> 00:06:13,000
现在很少用这种方式了

155
00:06:13,000 --> 00:06:15,000
但是十年前这种方式啊

156
00:06:15,000 --> 00:06:16,000
是非常普遍的

157
00:06:16,000 --> 00:06:17,000
那个时候自动微分

158
00:06:17,000 --> 00:06:19,000
还真的没有像今天的自动微分

159
00:06:19,000 --> 00:06:20,000
这么方便

160
00:06:20,000 --> 00:06:21,000
因为自动微分

161
00:06:21,000 --> 00:06:24,000
它依赖于一个这么方便的

162
00:06:24,000 --> 00:06:27,000
就是有了我们高级语言的操作服

163
00:06:27,000 --> 00:06:31,000
从在大二的时候

164
00:06:31,000 --> 00:06:33,000
刚学这个c++的多态性

165
00:06:33,000 --> 00:06:34,000
我就特别苦恼

166
00:06:34,000 --> 00:06:35,000
简直没法理解

167
00:06:35,000 --> 00:06:37,000
但现在其实我们等一下

168
00:06:37,000 --> 00:06:39,000
然后下一节课讲的时候

169
00:06:39,000 --> 00:06:40,000
其实它变得非常简单了

170
00:06:40,000 --> 00:06:42,000
然后我们利用语言的多态性

171
00:06:42,000 --> 00:06:44,000
把每一个计算

172
00:06:44,000 --> 00:06:45,000
我都记录成

173
00:06:45,000 --> 00:06:47,000
记录在我的tip里面

174
00:06:47,000 --> 00:06:48,000
把每个计算都记下来

175
00:06:48,000 --> 00:06:50,000
例如我现在算我的op

176
00:06:50,000 --> 00:06:51,000
就是我第一个操作

177
00:06:51,000 --> 00:06:53,000
我算假设是成

178
00:06:53,000 --> 00:06:56,000
我通过tip去把我的这个记下来

179
00:06:56,000 --> 00:06:58,000
然后我算第二个的时候

180
00:06:58,000 --> 00:07:00,000
我又通过我的tip去记下来

181
00:07:00,000 --> 00:07:01,000
记下来之后

182
00:07:01,000 --> 00:07:03,000
我这里面用过是不改字的

183
00:07:03,000 --> 00:07:05,000
因为我已经操作服重载了

184
00:07:05,000 --> 00:07:06,000
我可以随便的去改

185
00:07:06,000 --> 00:07:07,000
我里面的内容是吧

186
00:07:07,000 --> 00:07:09,000
计算机你随便让我记

187
00:07:09,000 --> 00:07:11,000
我就记录下来

188
00:07:11,000 --> 00:07:14,000
然后通过tip对tip进行便利

189
00:07:14,000 --> 00:07:16,000
对里面的一些基本操作

190
00:07:16,000 --> 00:07:18,000
去计算我的微分

191
00:07:18,000 --> 00:07:22,000
这样用户用起来就比较简单了

192
00:07:22,000 --> 00:07:24,000
所以说它的应用性很高

193
00:07:24,000 --> 00:07:26,000
非常贴合原生语言

194
00:07:26,000 --> 00:07:27,000
听不懂也没关系

195
00:07:27,000 --> 00:07:29,000
你会用这个AI框架就好了

196
00:07:29,000 --> 00:07:31,000
我们现在还在讲自动微分

197
00:07:31,000 --> 00:07:32,000
还没讲到AI框架

198
00:07:33,000 --> 00:07:35,000
那缺点就是我要显示的

199
00:07:35,000 --> 00:07:37,000
高达tip数据结构

200
00:07:37,000 --> 00:07:39,000
和对tip进行补写和便利

201
00:07:39,000 --> 00:07:40,000
这个就非常麻烦了

202
00:07:40,000 --> 00:07:43,000
对tip就对程序员来说就要求很高了

203
00:07:43,000 --> 00:07:45,000
对用户来说要求很少了

204
00:07:45,000 --> 00:07:48,000
另外我们还要有一个额外的数据结构

205
00:07:48,000 --> 00:07:51,000
引入操作不利于高阶微分

206
00:07:51,000 --> 00:07:53,000
这里面只是记录一个tip

207
00:07:53,000 --> 00:07:56,000
然后对它进行一次求导还好

208
00:07:56,000 --> 00:07:58,000
二阶求导呢

209
00:07:58,000 --> 00:07:59,000
三阶求导了

210
00:07:59,000 --> 00:08:00,000
更高阶的求导呢

211
00:08:00,000 --> 00:08:02,000
哎呀这个操作就非常难了

212
00:08:02,000 --> 00:08:03,000
那另外还有呢

213
00:08:03,000 --> 00:08:05,000
它的if else while这种呢

214
00:08:05,000 --> 00:08:09,000
表达式是非常通过操作符重载去计算的

215
00:08:09,000 --> 00:08:11,000
也就是if else while

216
00:08:11,000 --> 00:08:13,000
怎么放在我的操作符里面呢

217
00:08:13,000 --> 00:08:14,000
怎么变成一个图呢

218
00:08:14,000 --> 00:08:18,000
操作符重载是有它自己的毛病的

219
00:08:18,000 --> 00:08:20,000
那我们看一下操作符重载

220
00:08:20,000 --> 00:08:21,000
其实很简单的

221
00:08:21,000 --> 00:08:23,000
我们在这个是python的伪代码了

222
00:08:23,000 --> 00:08:25,000
我们去把这个mod还有add

223
00:08:25,000 --> 00:08:28,000
通过那个高级语言特性的

224
00:08:28,000 --> 00:08:29,000
去把它重载下来

225
00:08:29,000 --> 00:08:30,000
然后呢

226
00:08:30,000 --> 00:08:31,000
假设这里面呢

227
00:08:31,000 --> 00:08:32,000
有个ops add

228
00:08:32,000 --> 00:08:34,000
就是我们实现的一个功能了

229
00:08:34,000 --> 00:08:35,000
然后我们第一步呢

230
00:08:35,000 --> 00:08:36,000
是这么做的

231
00:08:36,000 --> 00:08:37,000
那第二步呢

232
00:08:37,000 --> 00:08:39,000
就实现我们的微分了

233
00:08:39,000 --> 00:08:39,000


234
00:08:39,000 --> 00:08:41,000
我们每一个微分都要去变力

235
00:08:41,000 --> 00:08:42,000
我的那个tip变力

236
00:08:42,000 --> 00:08:43,000
我的tip呢

237
00:08:43,000 --> 00:08:46,000
就是把每一个刚才的计算都变力一遍

238
00:08:46,000 --> 00:08:48,000
变力完之后呢

239
00:08:48,000 --> 00:08:50,000
我就需要对我的这个tip啊

240
00:08:50,000 --> 00:08:52,000
进行一个累积啊

241
00:08:52,000 --> 00:08:56,000
我下面这个计算是依赖于上面的

242
00:08:56,000 --> 00:08:57,000
所以我需要累积啊

243
00:08:57,000 --> 00:08:59,000
每一次计算都要累积的

244
00:08:59,000 --> 00:09:00,000
在反向的时候

245
00:09:00,000 --> 00:09:02,000
刚才我们上一集已经讲过了

246
00:09:02,000 --> 00:09:03,000
那再接下来呢

247
00:09:03,000 --> 00:09:06,000
就是讲我们的基于源码转换的一种方式啊

248
00:09:06,000 --> 00:09:08,000
源码转换的方式呢

249
00:09:08,000 --> 00:09:09,000
没有图

250
00:09:09,000 --> 00:09:10,000
现在还没图

251
00:09:10,000 --> 00:09:11,000
等一下我们还会出现一个图

252
00:09:11,000 --> 00:09:12,000
就是我们需要去分析

253
00:09:12,000 --> 00:09:14,000
原语言程序的表达形式

254
00:09:14,000 --> 00:09:15,000
PASA呢

255
00:09:15,000 --> 00:09:16,000
就是我们的解析器

256
00:09:16,000 --> 00:09:18,000
我们都要原语言进行解析

257
00:09:18,000 --> 00:09:20,000
然后基于原语言呢

258
00:09:20,000 --> 00:09:22,000
进行一个操作的一个分解

259
00:09:22,000 --> 00:09:23,000
分解完之后呢

260
00:09:23,000 --> 00:09:25,000
我们还要搞清楚它的依赖关系

261
00:09:26,000 --> 00:09:27,000
搞清楚它的依赖关系呢

262
00:09:27,000 --> 00:09:29,000
才可以应用链式求答法则

263
00:09:29,000 --> 00:09:30,000
进行一个自动微分

264
00:09:30,000 --> 00:09:32,000
实现起来了

265
00:09:32,000 --> 00:09:33,000
问题呢

266
00:09:33,000 --> 00:09:34,000
就是代码非常难理解

267
00:09:34,000 --> 00:09:36,000
包括写代码的人也很痛苦

268
00:09:36,000 --> 00:09:39,000
要搞很多计算机底层编译的问题

269
00:09:39,000 --> 00:09:41,000
但是这个才是学计算机人的

270
00:09:41,000 --> 00:09:43,000
最重要的概念呢

271
00:09:43,000 --> 00:09:45,000
我们大三大四都学啥呀

272
00:09:45,000 --> 00:09:47,000
不就学这个编译原理吗

273
00:09:47,000 --> 00:09:49,000
那问题就是复杂度很高啊

274
00:09:49,000 --> 00:09:51,000
需要学那个编译器和解析器

275
00:09:51,000 --> 00:09:54,000
对于中米来说也是个很头痛的事情

276
00:09:54,000 --> 00:09:57,000
因为大学的时候我就没有好好上这门课

277
00:10:00,000 --> 00:10:02,000
那它的优点就是没有额外的tape

278
00:10:02,000 --> 00:10:04,000
所以非常容易实现高阶的微分

279
00:10:04,000 --> 00:10:07,000
因为我已经得到了整个链式求答法则

280
00:10:07,000 --> 00:10:09,000
或者整个表达室的依赖关系

281
00:10:09,000 --> 00:10:10,000
然后呢

282
00:10:10,000 --> 00:10:13,000
我们的微分结果也是以代码的形式去存在的

283
00:10:13,000 --> 00:10:16,000
非常方便分布式系统去计算啊

284
00:10:16,000 --> 00:10:18,000
可能大家对分布式系统感知还不太大

285
00:10:18,000 --> 00:10:21,000
后面我们讲到的并行操作的时候

286
00:10:21,000 --> 00:10:23,000
大模型你就会感受很深

287
00:10:24,000 --> 00:10:27,000
那这个呢就是我们AST的过程

288
00:10:27,000 --> 00:10:29,000
首先我们分开编译的过程

289
00:10:29,000 --> 00:10:30,000
还有one time的过程

290
00:10:30,000 --> 00:10:31,000
one time就是执行

291
00:10:31,000 --> 00:10:32,000
这个就是编译

292
00:10:32,000 --> 00:10:34,000
我们需要拿到我们的源码

293
00:10:34,000 --> 00:10:36,000
原生的一个python的代码

294
00:10:36,000 --> 00:10:38,000
对它进行parser解析

295
00:10:38,000 --> 00:10:40,000
然后变成我们的图的IR

296
00:10:40,000 --> 00:10:41,000
然后去进行红展开

297
00:10:41,000 --> 00:10:42,000
然后红推你

298
00:10:42,000 --> 00:10:43,000
红编译

299
00:10:43,000 --> 00:10:46,000
然后内心推导那个IR优化

300
00:10:46,000 --> 00:10:48,000
最后再编译成我们的机器语言

301
00:10:49,000 --> 00:10:52,000
机器能够识别的一些代码

302
00:10:52,000 --> 00:10:54,000
就丢过来去执行的过程当中

303
00:10:54,000 --> 00:10:56,000
通过执行的时候呢

304
00:10:56,000 --> 00:10:58,000
对代码进行执行

305
00:10:58,000 --> 00:11:00,000
然后对代码的进行展开

306
00:11:00,000 --> 00:11:02,000
最后调用我们的函数

307
00:11:03,000 --> 00:11:04,000
那过程非常复杂

308
00:11:04,000 --> 00:11:05,000
非常用于是吧

309
00:11:05,000 --> 00:11:06,000
实现很难

310
00:11:06,000 --> 00:11:07,000
但是呢

311
00:11:07,000 --> 00:11:09,000
可能可以对做高阶微分很方便

312
00:11:09,000 --> 00:11:12,000
对做一些分布式很方便

313
00:11:13,000 --> 00:11:15,000
总结一下自动微分的实现方式有三种

314
00:11:15,000 --> 00:11:16,000
第一种呢

315
00:11:16,000 --> 00:11:18,000
就是表达设可图

316
00:11:18,000 --> 00:11:19,000
第二种呢

317
00:11:19,000 --> 00:11:20,000
就是操作附存载

318
00:11:20,000 --> 00:11:22,000
这三种不就原码转换吗

319
00:11:22,000 --> 00:11:23,000
刚才讲完

320
00:11:23,000 --> 00:11:25,000
那基于表达式的实现呢

321
00:11:25,000 --> 00:11:27,000
主要依赖于基础

322
00:11:27,000 --> 00:11:28,000
基于操作附存载呢

323
00:11:28,000 --> 00:11:30,000
主要依赖于语言的多态性

324
00:11:30,000 --> 00:11:32,000
基于原码转换呢

325
00:11:32,000 --> 00:11:35,000
主要依赖于我们整个编译的流程了

326
00:11:35,000 --> 00:11:38,000
这个就是很复杂很漫长了

327
00:11:41,000 --> 00:11:42,000
卷的不行了卷的不行了

328
00:11:42,000 --> 00:11:44,000
记得一键三连加关注哦

329
00:11:44,000 --> 00:11:47,000
所有的内容都会开源在下面这条链接里面

330
00:11:47,000 --> 00:11:48,000
拜拜

