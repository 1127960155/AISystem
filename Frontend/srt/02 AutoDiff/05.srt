1
00:00:00,000 --> 00:00:13,000
哈喽,大家好,我是钟咪酱。欢迎来到没什么要观看,但是我依然在坚持的钟咪酱的课堂。

2
00:00:13,000 --> 00:00:21,000
在这一节课里面,我主要是想给大家一起去分享一个前项操作不存在的自动微翻的具体实现。

3
00:00:21,000 --> 00:00:29,000
所以,在这一节课里面,我们没有了PPT,而是通过Drupital去承载我们今天的课程。

4
00:00:29,000 --> 00:00:34,000
在这里面,我们重新回顾一下什么叫做前项自动微翻。

5
00:00:34,000 --> 00:00:44,000
前项自动微翻就叫做Forward Model,或者叫做Tangent Model,甚至我们会叫做前项累积梯度的一种方式。

6
00:00:44,000 --> 00:00:53,000
公式还是我们熟悉的那个味道,y等于fxes2等于linkx1加上sex2减去sciencex1。

7
00:00:53,000 --> 00:00:55,000
在这里面,我们看看有多少个操作。

8
00:00:55,000 --> 00:01:06,000
首先,第一个就是x1x2,层法,第二个就是linkx1,第三个就是我们的science,第四个就是加号,第五个就是减号。

9
00:01:06,000 --> 00:01:13,000
我们有一共五个操作,也就是意味着我们今天要实现一个五个操作符的重载。

10
00:01:13,000 --> 00:01:22,000
下面这个图还是熟悉的味道,左边是我们整个数学公式的一个前项计算。

11
00:01:22,000 --> 00:01:32,000
前项计算的时候,我们首先会把x1x2,也就是对应的v-1v0,负一个具体的值,然后一步步的去计算。

12
00:01:32,000 --> 00:01:37,000
最终得到我们的y,我们的输出等于11.65。

13
00:01:37,000 --> 00:01:43,000
右边这个对应的就是高等数学里面学习的一元负合函数求导的法则。

14
00:01:43,000 --> 00:01:55,000
我们从最原始的开始只对x1的导数进行求解,一步步下来我们可以求得到y对于x1的导数是等于5.5。

15
00:01:55,000 --> 00:01:59,000
回到我们一个熟悉的图,就是我们的计算图。

16
00:01:59,000 --> 00:02:06,000
计算图里面每一个节点就是我们的中间变量,每一条边代表是一个计算或者一个连接。

17
00:02:06,000 --> 00:02:11,000
所以简单的,我们可以把自动微分分成几个关键的步骤。

18
00:02:11,000 --> 00:02:19,000
第一个就是把微分的规则表达出来,然后根据微分的规则把所有的微分的结果计算出来。

19
00:02:19,000 --> 00:02:29,000
第三个就是通过练试求导法则或者累积的方式把我们刚才第二步求得到的每一步的微分的结果组合起来。

20
00:02:29,000 --> 00:02:32,000
最后我们就得到输出的结果了。

21
00:02:32,000 --> 00:02:38,000
具体的实现当中,我们使用LMPAI去代表我们的计算。

22
00:02:38,000 --> 00:02:40,000
首先我们需要实现一个lay。

23
00:02:40,000 --> 00:02:46,000
这个lay有点类似于PyTorch里面的Tensor或者我们把它叫做张量。

24
00:02:46,000 --> 00:02:54,000
所有的内容我们通过ADTangent这个lay来表示,在初始化的时候,输入有两个。

25
00:02:54,000 --> 00:03:00,000
第一个是X,第二个是Dest,那S就是我们的一个正式的数值。

26
00:03:00,000 --> 00:03:04,000
第二个Dest就是我们对应的求导后的数。

27
00:03:05,000 --> 00:03:08,000
另外我们需要重载String操作。

28
00:03:08,000 --> 00:03:15,000
这个String操作的重载方式直接下面前面加两杠,后面加两杠,就是实现Python里面的String重载。

29
00:03:15,000 --> 00:03:22,000
String重载是为了方便我们直接print这个对象出来的时候,可以按照我们想要的方式打印出来。

30
00:03:22,000 --> 00:03:27,000
可以看到我们的context输出我们的一个value值,也就是我们的selfext。

31
00:03:27,000 --> 00:03:34,000
第二个就是输出我们的gradient的值,就是我们T度的值Dest两个数。

32
00:03:34,000 --> 00:03:40,000
下面我们来看看对加法这个操作副重载具体是怎么实现的。

33
00:03:40,000 --> 00:03:44,000
那我们再利用Python高级语言去实现操作副重载。

34
00:03:44,000 --> 00:03:49,000
刚才我们说了String是我们的一种方式,加号也是一种方式。

35
00:03:49,000 --> 00:03:56,000
我们在前面和后面分别加了两个斜杠,代表对这个add操作进行操作副重载。

36
00:03:56,000 --> 00:03:59,000
这里面输入Others是一个变量。

37
00:03:59,000 --> 00:04:09,000
我们首先去判断一下这个Others是不是一个ADT的类,如果是,我的ext等于selfext加上Othersext。

38
00:04:09,000 --> 00:04:15,000
这个时候我需要同步的去计算Ds,也就是我求导的公式的规则。

39
00:04:15,000 --> 00:04:19,000
这个求导的公式等于selfDs加上OthersDext。

40
00:04:20,000 --> 00:04:32,000
如果我的数入ext是一个直,也就是我等于float,加法里面我对本身的数进行求导,我的Others就会去掉,就是这个数等于0。

41
00:04:32,000 --> 00:04:33,000
所以我的ext是0。

